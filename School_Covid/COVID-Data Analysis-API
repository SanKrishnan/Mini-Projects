import numpy as np
import matplotlib.pyplot as plt
import requests
import tkinter as tk
from tkinter import ttk, messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# ==================== API FETCH FUNCTION ====================
def fetch_data(endpoint):
    base_url = "https://disease.sh/v3/covid-19/"
    try:
        response = requests.get(base_url + endpoint)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        messagebox.showerror("API Error", f"Error fetching data: {e}")
        return None

# ==================== GUI FUNCTIONS ====================
def show_about():
    messagebox.showinfo("About COVID-19", """
    INFO: COVID-19 is caused by SARS-CoV-2, first identified in Wuhan, China, in December 2019.
    It has since spread worldwide, leading to an ongoing pandemic.
    """)

def show_top_countries_gui(metric="cases", ascending=False, n=5):
    data = fetch_data(f"countries?sort={metric}")
    result = ""
    if data:
        sorted_data = sorted(data, key=lambda x: x.get(metric, 0), reverse=not ascending)
        for country in sorted_data[:n]:
            result += f"{country['country']}: {country.get(metric, 0)} {metric}\n"
    messagebox.showinfo(f"Top Countries by {metric.capitalize()}", result)

def show_graph_gui(metric="cases", ascending=False, n=5, title="", color='b'):
    data = fetch_data(f"countries?sort={metric}")
    if data:
        sorted_data = sorted(data, key=lambda x: x.get(metric, 0), reverse=not ascending)
        countries = [c['country'] for c in sorted_data[:n]]
        values = [c.get(metric, 0) for c in sorted_data[:n]]

        fig, ax = plt.subplots()
        ax.bar(countries, values, color=color, label=metric.capitalize())
        ax.set_title(title)
        ax.set_xlabel('Countries')
        ax.set_ylabel(f'Number of {metric.capitalize()}')
        ax.legend()
        fig.tight_layout()

        plot_window = tk.Toplevel(root)
        plot_window.title(title)
        canvas = FigureCanvasTkAgg(fig, master=plot_window)
        canvas.draw()
        canvas.get_tk_widget().pack()

def show_deaths_today():
    data = fetch_data("historical/all?lastdays=1")
    if data:
        latest_deaths = list(data['deaths'].values())[-1]
        messagebox.showinfo("Deaths in Last 24 Hours", f"Deaths: {latest_deaths}")

def show_deaths_graph():
    data = fetch_data("historical/all?lastdays=30")
    if data:
        fig, ax = plt.subplots()
        ax.plot(list(data['deaths'].keys()), list(data['deaths'].values()), marker="*", color='red')
        ax.set_title('Deaths Over Last 30 Days')
        ax.set_xlabel('Days')
        ax.set_ylabel('Number of Deaths')
        fig.autofmt_xdate()
        fig.tight_layout()

        plot_window = tk.Toplevel(root)
        plot_window.title("Deaths Over 30 Days")
        canvas = FigureCanvasTkAgg(fig, master=plot_window)
        canvas.draw()
        canvas.get_tk_widget().pack()

def search_country_gui():
    def search():
        name = entry.get()
        data = fetch_data(f"countries/{name}")
        if data:
            info = f"Country: {data['country']}\nCases: {data.get('cases', 'N/A')}\nDeaths: {data.get('deaths', 'N/A')}\nRecovered: {data.get('recovered', 'N/A')}\nActive: {data.get('active', 'N/A')}\nTests: {data.get('tests', 'N/A')}"
            messagebox.showinfo("Country Stats", info)

    win = tk.Toplevel(root)
    win.title("Search Country")
    tk.Label(win, text="Enter Country Name:").pack(pady=5)
    entry = tk.Entry(win)
    entry.pack(pady=5)
    tk.Button(win, text="Search", command=search).pack(pady=5)

def show_test_graph():
    data = fetch_data("countries?sort=tests")
    if data:
        countries = [country['country'] for country in data[:5]]
        tests = [country.get('tests', 0) for country in data[:5]]

        fig, ax = plt.subplots()
        ax.pie(tests, labels=countries, autopct='%1.1f%%', startangle=140)
        ax.set_title('COVID-19 Tests Conducted in Countries')

        plot_window = tk.Toplevel(root)
        plot_window.title("COVID-19 Tests")
        canvas = FigureCanvasTkAgg(fig, master=plot_window)
        canvas.draw()
        canvas.get_tk_widget().pack()

# ==================== GUI WINDOW ====================
root = tk.Tk()
root.title("COVID-19 Dashboard")
root.geometry("400x500")

options = [
    ("About COVID-19", show_about),
    ("Top 5 Worst Affected", lambda: show_top_countries_gui()),
    ("Top 5 Least Affected", lambda: show_top_countries_gui(ascending=True)),
    ("Deaths in Last 24 Hours", show_deaths_today),
    ("Graph - Worst Affected", lambda: show_graph_gui(title="Most Affected Countries", color='blue')),
    ("Graph - Least Affected", lambda: show_graph_gui(ascending=True, title="Least Affected Countries", color='green')),
    ("Graph - Deaths Over 30 Days", show_deaths_graph),
    ("Top 5 Testing Countries", lambda: show_top_countries_gui(metric="tests")),
    ("Graph - Testing Countries", show_test_graph),
    ("Search Country Stats", search_country_gui),
    ("Exit", root.quit)
]

for (text, command) in options:
    btn = tk.Button(root, text=text, command=command, width=40, pady=5)
    btn.pack(pady=3)

root.mainloop()
